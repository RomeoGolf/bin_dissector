Заготовка программы для обработки двоичных файлов заданного формата.

Python 3.3
используются модули struct, os, matplotlib, numpy, math, time, tkinter, configparser

Назначение:
Открытие двоичных файлов известного формата для последующей обработки.
Предполагается, что файл состоит из пакетов одинаковой длины, содержащих данные в неизменной последовательности. Данные могут быть представлены как одиночными значениями различного формата, так и массивами, состоящими из однотипных элементов
Формат пакета задается текстовым файлом конфигурации.
В текущем варианте предполагается, что переменные записаны в порядке байтов от младшего к старшему (little-endian).

Конфигурирование данных:
Текстовый файл состоит из строк, включающих две или три записи, разделенные символом табуляции.
Строка описания данных пакета содержит имя в первой записи, тип во второй записи и количество в третьей.
Тип кодируется как принято в MatLAB:
1   8 int
2   8 uint
3   16 int
4   16 uint
5   32 int
6   32 uint
7   single
9   double
12  64 int
13  64 uint

Количество показывает число элементов массива, в том числе 1 для одиночных данных.
Длина в байтах для данных, описываемых строкой, равна числу во второй записи минус 1, умноженному на число в третьей записи.
Если пакет включает в себя неиспользуемые и необрабатываемые данные, их необходимо описать строкой из двух записей: unused в первой и количество байтов во второй.
Имена (первые записи строк) должны быть уникальными (кроме имени unused).
Имя unused не рекомендуется использоваться в качестве имени данных.
Неиспользуемые данные (описываемые строкой с двумя записями) должны именоваться только unused
Пустые строки не обрабатываются и могут использоваться для визуального логического разделения данных.

Пример конфигурационного файла:
>>>>>>>>>>>>
header	2   8
var_11	2   1
var_41	5   1
array1	2   32
unused	64
array2	5   12
<<<<<<<<<<<<
Файл описывает двоичный файл данных, состоящий из пакетов длиной 157 байтов: массив из 8 байтов header, переменная из 1 байта var_11, переменная из 4 байтов var_41, массив из 32 байтов array1, 64 неиспользуемых байта и массив из 12 четырехбайтных элементов array2.

Описание:
Запускаемым файлом является GUI.py. Он использует data_read.py, который в свою очередь использует data_config.py. Модуль swertka.py используется для обработки данных для примера в модуле GUI.py.

data_config.py содержит класс DataConfig с методами для разбора текстового файла конфигурации данных (имя файла передается параметром конструктора), формирования шаблона config для обработки пакетов данных, вычисления длины packet_length пакета в байтах. 
Можно добавить/изменить: проверять существование и корректность файла конфигурации данных.

data_read.py содержит класс DataRead с методом-генератором get_vars. Методу передается файл данных и количество блоков для считывания. Генератор возвращает словарь variables, содержащий пары <имя переменной>:<значение переменной>, где имя берется из шаблона конфигурации, а значение - из текущего прочитанного пакета файла данных. Если переменная - массив, то она представлена в виде numpy array
Использует data_config
Можно добавить/изменить: проверять существование и корректность файла данных; реагировать на другие типы переменных (целая/дробная)

GUI.py формирует графический интерфейс (на базе Tkinter).
Обеспечивает выбор файла конфигурации данных, выбор файла данных, графическое представление процесса обработки (отключаемое), пропуск части пакетов в начале и конце файла данных, отображение времени обработки, номера пакета и оставшегося объема обработки, досрочное прекращение обработки. 
Использует data_read. Для обработки примера данных использует модуль swertka.
Метод process_data (обработчик кнопки Process) содержит основной цикл обработки файла. Перед циклом осуществляется открытие файла и подготовка окна графика, после завершения цикла - закрытие файла и завершение работы с графиком.
В самом цикле производится обработка словаря i, каждый элемент которого - именованная переменная или массив. Обращение к данным из словаря выполняется по их именам. Предполагается, что автор обработки знает имена переменных и массивов и порядок их использования.
Пример обработки: в файле данных имеется полученный из некоторого прибора записанный сигнал (массив) Srez и набор переменных, описывающих условия записи сигнала. Кроме того, в файле имеется массив Swertka, полученный в приборе из сигнала Srez с учетом переменных. В цикле обрабатывается Srez по алгоритму, используемому в приборе (модуль swertka), результирующий массив выводится на график совместно с массивом Swertka из файла. Почти полное совпадение массивов показывает правильность интерпретации и обработки данных.
Можно добавить/изменить: ввести защиту от неправильных действий полььзователя (закрытие программы или графика в процессе обработки и т. д.), встроить график в окно GUI, добавить формирование и запись файла с результатами обработки

Использование:
1. В модуле GUI подготовить обработку и отображение данных.
2. Запустить модуль GUI.
3. Выбрать файл конфигурации данных (кнопка select строки config)
4. Выбрать файл данных (кнопка select строки data)
5. Установить или снять флажок Show graph - показывать или нет графическое представление процесса обработки
6. Открыть файл конфигурации данных (кнопка Open)
7. Установить или снять флажок Use skip, при установленном - выбрать количество пакетов, пропускаемых в начале и конце файла, с учетом отображаемого количества пакетов в файле (packets:)
8. Запустить обработку (кнопка Process). Наблюдать полосу процесса, номер текущего пакета, время прошедшее, оставшееся и ожидаемое. Для отображения номера пакета (packet #:) используется переменная "Npack_" из массива данных. Следует учитывать имя такой переменной при модификации скрипта и использовать счетчик при ее отсутствии.
9. При необходимости в процессе обработки снимать или устанавливать флажок Show graph. Окно графика не закрывать! Снятие флажка (отключение отображения) значительно ускоряет обработку.
10. При необходимости досрочного завершения обработки нажать кнопку Stop.
11. Закрыть окно (кнопка Quit).

Рекомендации:
При подготовке данных рекомендуется первым элементом данных делать массив или число, являющееся заголовком пакета. Такой элемент должен быть одинаковым для всех пакетов. Это полезно при проверке соответствия файла конфигурации файлу данных и при проверке целостности файла данных.
В пакет рекомендуется включать относительно уникальные для каждого пакета данные - номер пакета, время получения и тому подобное. Это полезно при проверке непрерывности файла данных и при отладке обработки.
Если есть риск потерять часть данных пакета (например, конец предыдущего и начало следующего), имеет смысл включить в пакет контрольную сумму.


Известные недоделки:
- Не следует закрывать окно интерфейса, пока идет обработка. Предварительно следует остановить процесс (кнопкой Stop).
- При снятом флажке отображения графика не следует закрывать пустое окно графика. Если все же закрыли, то в процессе обработки не включать этот флажок.
- При отображении процесса обработки в графике не следует закрывать окно графика.
- нет проверки допустимости количества пропускаемых пакетов (skip)
- нет проверки соответствия конфигурационного файла файлу данных
- нет проверки целостности файла данных.

